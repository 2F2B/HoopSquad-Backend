generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Alarm {
  Alarm_id  Int     @id @default(autoincrement())
  User_id   Int
  UserImage Bytes?  @db.Blob
  Text      String  @db.VarChar(200)
  IsRead    Boolean @default(false)
  IsApply   Int?
  User      User    @relation(fields: [User_id], references: [User_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_Alarm_User")

  @@index([User_id], map: "User_idx")
}

model ChatRoom {
  Room_id Int       @id @default(autoincrement())
  Host_id Int
  RoomName String
  Time    DateTime  @default(now()) @db.Timestamp(0)
  Message Message[]
  User    User?     @relation(fields: [Host_id], references: [User_id], onDelete: NoAction, onUpdate: NoAction)
}

model Court {
  Court_id Int      @default(autoincrement())
  Name     String   @db.VarChar(45)
  Date     DateTime @default(now()) @db.Timestamp(0)
  Location String   @db.VarChar(100)
  Map_id   Int
  Map      Map      @relation(fields: [Map_id], references: [Map_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_Court_Map")

  @@id([Court_id, Map_id])
  @@index([Map_id], map: "Map_idx")
}

model Map {
  Map_id       Int       @id @default(autoincrement())
  LocationName String    @db.VarChar(45)
  Lat          Float     @db.Float
  Lng          Float     @db.Float
  Court        Court[]
  Posting      Posting[]
}

model Message {
  Message_id  Int      @id @default(autoincrement())
  Room_id     Int
  Msg         String   @db.LongText
  ChatTime    DateTime @default(now()) @db.Timestamp(0)
  User_id     Int
  User        User     @relation(fields: [User_id], references: [User_id], onDelete: Cascade, onUpdate: NoAction)
  ChatRoom    ChatRoom @relation(fields: [Room_id], references: [Room_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_Message_ChatRoom")

  @@index([Room_id], map: "Room_idx")
  @@index([User_id], map: "Message_User_id_fkey")
}

model OAuthToken {
  id               Int    @id @default(autoincrement())
  User_id          Int
  AccessToken      String @db.VarChar(255)
  RefreshToken     String @db.VarChar(255)
  AToken_CreatedAt String @db.VarChar(20)
  RToken_CreatedAt String @db.VarChar(20)
  AToken_Expires   Int
  RToken_Expires   Int
  Auth_id          String @db.VarChar(40)
  User             User   @relation(fields: [User_id], references: [User_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_OAuthToken_User")

  @@index([User_id], map: "Personal_idx")
}


model Posting {
  Posting_id    Int        @id @default(autoincrement())
  User_id       Int
  IsTeam        Boolean    @default(false)
  Title         String     @db.VarChar(100)
  WriteDate     DateTime   @default(now()) @db.Timestamp(0)
  PlayTime      Int
  Location      String     @db.VarChar(45)
  RecruitAmount String     @db.VarChar(45)
  CurrentAmount String     @db.VarChar(45)
  Introduce     String?    @db.VarChar(600)
  Map_id        Int
  GameType      GameType[]
  Image         Image[]
  Map           Map        @relation(fields: [Map_id], references: [Map_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_Posting_Map")
  User          User       @relation(fields: [User_id], references: [User_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Posting_User")

  @@index([User_id], map: "Writer_idx")
  @@index([Map_id], map: "fk_Posting_Map1_idx")
}
model Profile {
  User_id   Int        @id
  Height    Float?     @db.Float
  Age       Int?
  Position  String? @db.VarChar(45)
  Grade     String? @db.VarChar(45)
  GameType  Int?
  Introduce String? @db.VarChar(45)
  Location  String? @db.VarChar(45)
  Image     Image[]
  User      User    @relation(fields: [User_id], references: [User_id], onDelete: Cascade, onUpdate: NoAction)
}
model Review {
  User_id Int     @id @default(autoincrement())
  Fouls   Boolean
  Review  String? @db.VarChar(100)
  User    User    @relation(fields: [User_id], references: [User_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_Review_User")
}

model TeamProfile {
  Team_id    Int        @id @default(autoincrement())
  Admin_id   Int
  Name       String     @db.VarChar(45)
  TeamImage  Bytes?     @db.Blob
  Location   String     @db.VarChar(45)
  Introduce  String?    @db.VarChar(400)
  LatestDate DateTime?  @db.DateTime(0)
  UserAmount Int?
  User       User       @relation(fields: [Admin_id], references: [User_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_TeamProfile_Admin")
  TeamRelay  TeamRelay?

  @@index([Admin_id], map: "fk_TeamProfile_UserProfile1_idx")
}

model TeamRelay {
  Team_id     Int         @id
  IsAdmin     Boolean
  User_id     Int
  User        User        @relation(fields: [User_id], references: [User_id], onDelete: NoAction, onUpdate: NoAction)
  TeamProfile TeamProfile @relation(fields: [Team_id], references: [Team_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_TeamRelay_TeamProfile")

  @@index([Team_id], map: "fk_TeamRelay_TeamProfile")
  @@index([User_id], map: "TeamRelay_User_id_fkey")
}

model User {
  User_id     Int           @id @default(autoincrement())
  Name        String        @db.VarChar(45)
  Alarm       Alarm[]
  OAuthToken  OAuthToken[]
  Posting     Posting[]
  Profile     Profile?
  Review      Review?
  TeamProfile TeamProfile[]
  TeamRelay   TeamRelay[]
  UserData    UserData[]
  ChatRoom    ChatRoom[]
  Message     Message[]
}

model Image {
  Image_id   Int      @id @default(autoincrement())
  ImageData  Bytes    @db.Blob
  Posting_id Int?
  Profile_id Int?
  Posting    Posting? @relation(fields: [Posting_id], references: [Posting_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_image_posting")
  Profile    Profile? @relation(fields: [Profile_id], references: [User_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_image_profile")

  @@index([Posting_id], map: "fk_image_posting")
  @@index([Profile_id], map: "fk_image_profile")
}

model UserData {
  Data_id  Int    @id @default(autoincrement())
  Email    String @db.VarChar(50)
  Password String @db.VarChar(50)
  User_id  Int
  User     User   @relation(fields: [User_id], references: [User_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_UserData_User")

  @@index([User_id], map: "User_idx")
}
model GameType {
  GameType_id  Int     @id @default(autoincrement())
  Posting_id   Int
  OneOnOne     Boolean @default(false)
  ThreeOnThree Boolean @default(false)
  FiveOnFive   Boolean @default(false)
  Posting      Posting @relation(fields: [Posting_id], references: [Posting_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_GameType_posting")

  @@index([Posting_id], map: "fk_GameType_Posting")
}

